<?php


/**
 * Base class that represents a query for the 'evaluation' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Mon Apr 30 19:09:40 2012
 *
 * @method     EvaluationQuery orderBySiteId($order = Criteria::ASC) Order by the site_id column
 * @method     EvaluationQuery orderByEcriteriaId($order = Criteria::ASC) Order by the ecriteria_id column
 * @method     EvaluationQuery orderByMetricId($order = Criteria::ASC) Order by the metric_id column
 * @method     EvaluationQuery orderByValue($order = Criteria::ASC) Order by the value column
 * @method     EvaluationQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     EvaluationQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     EvaluationQuery groupBySiteId() Group by the site_id column
 * @method     EvaluationQuery groupByEcriteriaId() Group by the ecriteria_id column
 * @method     EvaluationQuery groupByMetricId() Group by the metric_id column
 * @method     EvaluationQuery groupByValue() Group by the value column
 * @method     EvaluationQuery groupByCreatedAt() Group by the created_at column
 * @method     EvaluationQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     EvaluationQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     EvaluationQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     EvaluationQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     EvaluationQuery leftJoinSite($relationAlias = null) Adds a LEFT JOIN clause to the query using the Site relation
 * @method     EvaluationQuery rightJoinSite($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Site relation
 * @method     EvaluationQuery innerJoinSite($relationAlias = null) Adds a INNER JOIN clause to the query using the Site relation
 *
 * @method     EvaluationQuery leftJoinEcriteria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Ecriteria relation
 * @method     EvaluationQuery rightJoinEcriteria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Ecriteria relation
 * @method     EvaluationQuery innerJoinEcriteria($relationAlias = null) Adds a INNER JOIN clause to the query using the Ecriteria relation
 *
 * @method     EvaluationQuery leftJoinMetric($relationAlias = null) Adds a LEFT JOIN clause to the query using the Metric relation
 * @method     EvaluationQuery rightJoinMetric($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Metric relation
 * @method     EvaluationQuery innerJoinMetric($relationAlias = null) Adds a INNER JOIN clause to the query using the Metric relation
 *
 * @method     Evaluation findOne(PropelPDO $con = null) Return the first Evaluation matching the query
 * @method     Evaluation findOneOrCreate(PropelPDO $con = null) Return the first Evaluation matching the query, or a new Evaluation object populated from the query conditions when no match is found
 *
 * @method     Evaluation findOneBySiteId(int $site_id) Return the first Evaluation filtered by the site_id column
 * @method     Evaluation findOneByEcriteriaId(int $ecriteria_id) Return the first Evaluation filtered by the ecriteria_id column
 * @method     Evaluation findOneByMetricId(int $metric_id) Return the first Evaluation filtered by the metric_id column
 * @method     Evaluation findOneByValue(int $value) Return the first Evaluation filtered by the value column
 * @method     Evaluation findOneByCreatedAt(string $created_at) Return the first Evaluation filtered by the created_at column
 * @method     Evaluation findOneByUpdatedAt(string $updated_at) Return the first Evaluation filtered by the updated_at column
 *
 * @method     array findBySiteId(int $site_id) Return Evaluation objects filtered by the site_id column
 * @method     array findByEcriteriaId(int $ecriteria_id) Return Evaluation objects filtered by the ecriteria_id column
 * @method     array findByMetricId(int $metric_id) Return Evaluation objects filtered by the metric_id column
 * @method     array findByValue(int $value) Return Evaluation objects filtered by the value column
 * @method     array findByCreatedAt(string $created_at) Return Evaluation objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return Evaluation objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseEvaluationQuery extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseEvaluationQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Evaluation', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new EvaluationQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    EvaluationQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof EvaluationQuery) {
			return $criteria;
		}
		$query = new EvaluationQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj = $c->findPk(array(12, 34, 56), $con);
	 * </code>
	 *
	 * @param     array[$site_id, $ecriteria_id, $metric_id] $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Evaluation|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = EvaluationPeer::getInstanceFromPool(serialize(array((string) $key[0], (string) $key[1], (string) $key[2]))))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(EvaluationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Evaluation A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT `SITE_ID`, `ECRITERIA_ID`, `METRIC_ID`, `VALUE`, `CREATED_AT`, `UPDATED_AT` FROM `evaluation` WHERE `SITE_ID` = :p0 AND `ECRITERIA_ID` = :p1 AND `METRIC_ID` = :p2';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key[0], PDO::PARAM_INT);
			$stmt->bindValue(':p1', $key[1], PDO::PARAM_INT);
			$stmt->bindValue(':p2', $key[2], PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new Evaluation();
			$obj->hydrate($row);
			EvaluationPeer::addInstanceToPool($obj, serialize(array((string) $row[0], (string) $row[1], (string) $row[2])));
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Evaluation|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(array(12, 56), array(832, 123), array(123, 456)), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		$this->addUsingAlias(EvaluationPeer::SITE_ID, $key[0], Criteria::EQUAL);
		$this->addUsingAlias(EvaluationPeer::ECRITERIA_ID, $key[1], Criteria::EQUAL);
		$this->addUsingAlias(EvaluationPeer::METRIC_ID, $key[2], Criteria::EQUAL);

		return $this;
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		if (empty($keys)) {
			return $this->add(null, '1<>1', Criteria::CUSTOM);
		}
		foreach ($keys as $key) {
			$cton0 = $this->getNewCriterion(EvaluationPeer::SITE_ID, $key[0], Criteria::EQUAL);
			$cton1 = $this->getNewCriterion(EvaluationPeer::ECRITERIA_ID, $key[1], Criteria::EQUAL);
			$cton0->addAnd($cton1);
			$cton2 = $this->getNewCriterion(EvaluationPeer::METRIC_ID, $key[2], Criteria::EQUAL);
			$cton0->addAnd($cton2);
			$this->addOr($cton0);
		}

		return $this;
	}

	/**
	 * Filter the query on the site_id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterBySiteId(1234); // WHERE site_id = 1234
	 * $query->filterBySiteId(array(12, 34)); // WHERE site_id IN (12, 34)
	 * $query->filterBySiteId(array('min' => 12)); // WHERE site_id > 12
	 * </code>
	 *
	 * @see       filterBySite()
	 *
	 * @param     mixed $siteId The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterBySiteId($siteId = null, $comparison = null)
	{
		if (is_array($siteId) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(EvaluationPeer::SITE_ID, $siteId, $comparison);
	}

	/**
	 * Filter the query on the ecriteria_id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByEcriteriaId(1234); // WHERE ecriteria_id = 1234
	 * $query->filterByEcriteriaId(array(12, 34)); // WHERE ecriteria_id IN (12, 34)
	 * $query->filterByEcriteriaId(array('min' => 12)); // WHERE ecriteria_id > 12
	 * </code>
	 *
	 * @see       filterByEcriteria()
	 *
	 * @param     mixed $ecriteriaId The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterByEcriteriaId($ecriteriaId = null, $comparison = null)
	{
		if (is_array($ecriteriaId) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(EvaluationPeer::ECRITERIA_ID, $ecriteriaId, $comparison);
	}

	/**
	 * Filter the query on the metric_id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByMetricId(1234); // WHERE metric_id = 1234
	 * $query->filterByMetricId(array(12, 34)); // WHERE metric_id IN (12, 34)
	 * $query->filterByMetricId(array('min' => 12)); // WHERE metric_id > 12
	 * </code>
	 *
	 * @see       filterByMetric()
	 *
	 * @param     mixed $metricId The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterByMetricId($metricId = null, $comparison = null)
	{
		if (is_array($metricId) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(EvaluationPeer::METRIC_ID, $metricId, $comparison);
	}

	/**
	 * Filter the query on the value column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByValue(1234); // WHERE value = 1234
	 * $query->filterByValue(array(12, 34)); // WHERE value IN (12, 34)
	 * $query->filterByValue(array('min' => 12)); // WHERE value > 12
	 * </code>
	 *
	 * @param     mixed $value The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterByValue($value = null, $comparison = null)
	{
		if (is_array($value)) {
			$useMinMax = false;
			if (isset($value['min'])) {
				$this->addUsingAlias(EvaluationPeer::VALUE, $value['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($value['max'])) {
				$this->addUsingAlias(EvaluationPeer::VALUE, $value['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(EvaluationPeer::VALUE, $value, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
	 * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
	 * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $createdAt The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(EvaluationPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(EvaluationPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(EvaluationPeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query on the updated_at column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
	 * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
	 * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $updatedAt The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null, $comparison = null)
	{
		if (is_array($updatedAt)) {
			$useMinMax = false;
			if (isset($updatedAt['min'])) {
				$this->addUsingAlias(EvaluationPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($updatedAt['max'])) {
				$this->addUsingAlias(EvaluationPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(EvaluationPeer::UPDATED_AT, $updatedAt, $comparison);
	}

	/**
	 * Filter the query by a related Site object
	 *
	 * @param     Site|PropelCollection $site The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterBySite($site, $comparison = null)
	{
		if ($site instanceof Site) {
			return $this
				->addUsingAlias(EvaluationPeer::SITE_ID, $site->getId(), $comparison);
		} elseif ($site instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(EvaluationPeer::SITE_ID, $site->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterBySite() only accepts arguments of type Site or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Site relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function joinSite($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Site');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Site');
		}

		return $this;
	}

	/**
	 * Use the Site relation Site object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SiteQuery A secondary query class using the current class as primary query
	 */
	public function useSiteQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinSite($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Site', 'SiteQuery');
	}

	/**
	 * Filter the query by a related Ecriteria object
	 *
	 * @param     Ecriteria|PropelCollection $ecriteria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterByEcriteria($ecriteria, $comparison = null)
	{
		if ($ecriteria instanceof Ecriteria) {
			return $this
				->addUsingAlias(EvaluationPeer::ECRITERIA_ID, $ecriteria->getId(), $comparison);
		} elseif ($ecriteria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(EvaluationPeer::ECRITERIA_ID, $ecriteria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByEcriteria() only accepts arguments of type Ecriteria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Ecriteria relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function joinEcriteria($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Ecriteria');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Ecriteria');
		}

		return $this;
	}

	/**
	 * Use the Ecriteria relation Ecriteria object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EcriteriaQuery A secondary query class using the current class as primary query
	 */
	public function useEcriteriaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinEcriteria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Ecriteria', 'EcriteriaQuery');
	}

	/**
	 * Filter the query by a related Metric object
	 *
	 * @param     Metric|PropelCollection $metric The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function filterByMetric($metric, $comparison = null)
	{
		if ($metric instanceof Metric) {
			return $this
				->addUsingAlias(EvaluationPeer::METRIC_ID, $metric->getId(), $comparison);
		} elseif ($metric instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(EvaluationPeer::METRIC_ID, $metric->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByMetric() only accepts arguments of type Metric or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Metric relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function joinMetric($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Metric');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Metric');
		}

		return $this;
	}

	/**
	 * Use the Metric relation Metric object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    MetricQuery A secondary query class using the current class as primary query
	 */
	public function useMetricQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinMetric($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Metric', 'MetricQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Evaluation $evaluation Object to remove from the list of results
	 *
	 * @return    EvaluationQuery The current query, for fluid interface
	 */
	public function prune($evaluation = null)
	{
		if ($evaluation) {
			$this->addCond('pruneCond0', $this->getAliasedColName(EvaluationPeer::SITE_ID), $evaluation->getSiteId(), Criteria::NOT_EQUAL);
			$this->addCond('pruneCond1', $this->getAliasedColName(EvaluationPeer::ECRITERIA_ID), $evaluation->getEcriteriaId(), Criteria::NOT_EQUAL);
			$this->addCond('pruneCond2', $this->getAliasedColName(EvaluationPeer::METRIC_ID), $evaluation->getMetricId(), Criteria::NOT_EQUAL);
			$this->combine(array('pruneCond0', 'pruneCond1', 'pruneCond2'), Criteria::LOGICAL_OR);
		}

		return $this;
	}

} // BaseEvaluationQuery